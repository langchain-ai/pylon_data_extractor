[project]
name = "pylon-data-extractor"
version = "0.1.0"
description = "Extended data replication utility for Pylon using the Pylon REST API"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "Pylon Data Team"}
]
dependencies = [
    "google-cloud-bigquery>=3.13.0",
    "google-auth>=2.23.0",
    "requests>=2.31.0",
    "python-dateutil>=2.8.2",
    "pydantic>=2.4.0",
    "typer>=0.9.0",
    "rich>=13.6.0",
    "structlog>=23.2.0",
    "tenacity>=8.2.3",
    "python-dotenv>=1.1.1",
    "langchain-openai>=0.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "black>=23.9.0",
    "ruff>=0.0.290",
    "mypy>=1.5.1",
    "types-requests>=2.31.0",
    "types-python-dateutil>=2.8.19",
]

[project.scripts]
pylon-extract = "src.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise with from in except clauses (too verbose for this project)
    "UP006", # use built-in types for type annotations (backward compatibility)
    "UP035", # use built-in types for type annotations (backward compatibility)
    "E722",  # bare except clauses (acceptable for simple error handling)
    "F841",  # unused local variables (acceptable in some cases)
    "UP028", # yield from optimization (not critical)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*.py" = ["B017"]  # allow asserting on generic Exception in tests

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "-v",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "ruff>=0.12.11",
    "types-python-dateutil>=2.9.0.20250822",
    "types-requests>=2.32.4.20250809",
]
